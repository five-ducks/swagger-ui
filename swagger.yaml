openapi: 3.0.3
info:
  title: Gaming Tournament API
  description: "API for managing users, matches, tournaments, and friendships in a gaming platform."
  version: 1.0.0

servers:
  - description: "Main API server"
    url: https://api.gamingplatform.com/v1

paths:
  /user:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: "User to be created"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: "User created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: "Invalid input data"
      tags:
        - User
  
  /user/login:
    get:
      summary: User login
      operationId: loginUser
      parameters:
        - name: user_login_id
          in: query
          description: "The user name for login"
          required: true
          schema:
            type: string
        - name: user_login_password
          in: query
          description: "The password for login in clear text"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: "Invalid username/password supplied"
        '401':
          description: "Unauthorized. Invalid login ID or password."
      tags:
        - User
        
  /user/logout:
    delete:
      summary: User logout
      description: "Endpoint to log out a user and invalidate the session."
      operationId: logoutUser
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
            description: "Authentication token required for logout."
      responses:
        '200':
          description: "Successful logout."
        '400':
          description: "Invalid or expired token."
        '401':
          description: "Unauthorized. Invalid or expired token."
      tags:
        - User
          
  /user/{user_id}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: "User not found"
      tags:
        - User

    put:
      summary: Update a user by ID
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: "User data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: "User updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: "Invalid input data"
        '404':
          description: "User not found"
      tags:
        - User

    delete:
      summary: Delete a user by ID
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: "User deleted successfully"
        '404':
          description: "User not found"
      tags:
        - User

  /match:
    post:
      summary: Create a new match
      operationId: createMatch
      requestBody:
        description: "Match to be created"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchCreationRequest'
      responses:
        '201':
          description: "Match created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
        '400':
          description: "Invalid input data"
      tags:
        - Match
  
    get:
      summary: Retrieve matches with filters
      operationId: getMatches
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
          description: "Filter matches by user ID"
        - name: rival_id
          in: query
          required: false
          schema:
            type: integer
          description: "Filter matches by rival user ID"
        - name: result
          in: query
          required: false
          schema:
            type: string
            enum: [win, lose]
          description: "Filter matches by result (win or lose)"
        - name: match_type
          in: query
          required: false
          schema:
            type: string
            enum: [single, tournament]
          description: "Filter matches by match type (single or tournament)"
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: "Filter matches that started after this date"
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: "Filter matches that ended before this date"
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: "Page number for pagination"
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: "Number of results per page"
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            enum: [start_time, end_time, grade]
            default: start_time
          description: "Sort matches by a specific field (start_time, end_time, or grade)"
        - name: order
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: "Order of sorting (ascending or descending)"
      responses:
        '200':
          description: "List of matches"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchResponse'
        '400':
          description: "Invalid filter parameters"
      tags:
        - Match

  /match/{match_id}:
    get:
      summary: Retrieve a specific match
      operationId: getMatchById
      parameters:
        - name: match_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Match details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
        '404':
          description: "Match not found"
      tags:
        - Match

    put:
      summary: Update a match
      operationId: updateMatch
      parameters:
        - name: match_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: "Match data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchCreationRequest'
      responses:
        '200':
          description: "Match updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
        '400':
          description: "Invalid input data"
        '404':
          description: "Match not found"
      tags:
        - Match

    delete:
      summary: Delete a match
      operationId: deleteMatch
      parameters:
        - name: match_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: "Match deleted successfully"
        '404':
          description: "Match not found"
      tags:
        - Match

  /tournament:
    post:
      summary: Create a new tournament
      operationId: createTournament
      requestBody:
        description: "Tournament to be created"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentCreationRequest'
      responses:
        '201':
          description: "Tournament created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentResponse'
        '400':
          description: "Invalid input data"
      tags:
        - Tournament

    get:
      summary: Retrieve tournaments with filters
      operationId: getTournaments
      parameters:
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: "Filter tournaments that started after this date"
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: "Filter tournaments that ended before this date"
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: "Page number for pagination"
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: "Number of results per page"
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            enum: [start_time, end_time]
            default: start_time
          description: "Sort tournaments by a specific field (start_time or end_time)"
        - name: order
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: "Order of sorting (ascending or descending)"
      responses:
        '200':
          description: "List of tournaments"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TournamentResponse'
        '400':
          description: "Invalid filter parameters"
      tags:
        - Tournament

  /tournament/{tournament_id}:
    get:
      summary: Retrieve a specific tournament
      operationId: getTournamentById
      parameters:
        - name: tournament_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Tournament details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentResponse'
        '404':
          description: "Tournament not found"
      tags:
        - Tournament

    put:
      summary: Update a tournament
      operationId: updateTournament
      parameters:
        - name: tournament_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: "Tournament data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentCreationRequest'
      responses:
        '200':
          description: "Tournament updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentResponse'
        '400':
          description: "Invalid input data"
        '404':
          description: "Tournament not found"
      tags:
        - Tournament

    delete:
      summary: Delete a tournament
      operationId: deleteTournament
      parameters:
        - name: tournament_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: "Tournament deleted successfully"
        '404':
          description: "Tournament not found"
      tags:
        - Tournament

  /tournament/{tournament_id}/rankings:
    get:
      summary: Get user rankings for a specific tournament
      operationId: getTournamentRankings
      parameters:
        - name: tournament_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "User rankings for the tournament"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TournamentRankingResponse'
        '404':
          description: "Tournament not found"
      tags:
        - Tournament


  /friend:
    post:
      summary: Add a new friend
      operationId: createFriend
      requestBody:
        description: "Friend to be added"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendCreationRequest'
      responses:
        '201':
          description: "Friend added successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendResponse'
        '400':
          description: "Invalid input data"
      tags:
        - Friend
        
    get:
      summary: Retrieve a list of all friends
      operationId: getAllFriends
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
          description: "Filter friends by user ID"
        - name: relation
          in: query
          required: false
          schema:
            type: string
            enum: [pending, accepted, blocked]
          description: "Filter friends by relation status"
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: "Page number for pagination"
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: "Number of results per page"
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            enum: [user_id, friend_user_id]
            default: user_id
          description: "Sort friends by a specific field"
        - name: order
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: "Order of sorting (ascending or descending)"
      responses:
        '200':
          description: "A list of friends"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FriendResponse'
        '400':
          description: "Invalid filter parameters"
      tags:
        - Friend
  
  /friend/{user_id}:
    get:
      summary: Retrieve all friends for a specific user
      operationId: getUserFriends
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: "User ID to retrieve friends for"
      responses:
        '200':
          description: "List of friends for the specific user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FriendResponse'
        '404':
          description: "User not found or no friends available"
      tags:
        - Friend
  
  /friend/{user_id}/{friend_user_id}:
    put:
      summary: Update a friend by ID
      operationId: updateFriend
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
        - name: friend_user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: "User data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendResponse'
      responses:
        '200':
          description: "User updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendResponse'
        '400':
          description: "Invalid input data"
        '404':
          description: "User not found"
      tags:
        - Friend
        
    delete:
      summary: Remove a friend
      operationId: deleteFriend
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
        - name: friend_user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: "Friend removed successfully"
        '404':
          description: "Friend not found"
      tags:
        - Friend

components:
  schemas:

    AuthToken:
      type: object
      properties:
        token:
          type: string
          description: "Authentication token required for logout."

    CreateUserRequest:
      type: object
      properties:
        login_id:
          type: string
          description: "Username used as the login ID for the user."
        password:
          type: string
          format: password
          description: "Password for the user login."
        nickname:
          type: string
          description: "Nickname for the user."
        profile_image_url:
          type: string
          format: uri
          description: "URL of the user's profile image."
      required:
        - login_id
        - password
        - nickname

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "Unique identifier for the user."
        login_id:
          type: string
          description: "Username used as the login ID for the user."
        nickname:
          type: string
          description: "Nickname for the user."
        profile_image_url:
          type: string
          format: uri
          description: "URL of the user's profile image."
        macrotexts:
          type: object
          properties:
            macrotext1:
              type: string
              example: 'good game'
            macrotext2:
              type: string
              example: 'thanks'
            macrotext3:
              type: string
              example: 'bye bye'
            macrotext4:
              type: string
              example: 'gooooood!'
            macrotext5:
              type: string
              example: 'hello'

    LoginRequest:
      type: object
      properties:
        login_id:
          type: string
          description: "The user name for login"
        password:
          type: string
          format: password
          description: "The password for login in clear text"
      required:
        - login_id
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: "Authentication token returned upon successful login."
        expires_at:
          type: string
          format: date-time
          description: "Expiration time of the authentication token."

    MatchCreationRequest:
      type: object
      properties:
        rival_id:
          type: integer
          format: int64
          description: "Identifier for the rival user."
        result:
          type: string
          enum: [win, lose]
          description: "Result of the match."
        start_time:
          type: string
          format: date-time
          description: "Start time of the match."
        end_time:
          type: string
          format: date-time
          description: "End time of the match."
        user_grade:
          type: integer
          format: int32
          description: "Grade of the user in the match."
        rival_grade:
          type: integer
          format: int32
          description: "Grade of the rival user in the match."
        type:
          type: string
          enum: [single, tournament]
          description: "Type of match."
      required:
        - rival_id
        - start_time
        - type

    MatchResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "Unique identifier for the match."
        user_id:
          type: integer
          format: int64
          description: "Identifier for the user who participated in the match."
        rival_id:
          type: integer
          format: int64
          description: "Identifier for the rival user."
        result:
          type: string
          enum: [win, lose]
          description: "Result of the match."
        start_time:
          type: string
          format: date-time
          description: "Start time of the match."
        end_time:
          type: string
          format: date-time
          description: "End time of the match."
        user_grade:
          type: integer
          format: int32
          description: "Grade of the user in the match."
        rival_grade:
          type: integer
          format: int32
          description: "Grade of the rival user in the match."
        type:
          type: string
          enum: [single, tournament]
          description: "Type of match."

    TournamentCreationRequest:
      type: object
      properties:
        semifinal_id1:
          type: integer
          description: "ID of the first semifinal match."
        semifinal_id2:
          type: integer
          description: "ID of the second semifinal match."
        bonus_match_id:
          type: integer
          description: "ID of the bonus match."
        final_id:
          type: integer
          description: "ID of the final match."
      required:
        - semifinal_id1
        - semifinal_id2

    TournamentResponse:
      type: object
      properties:
        tournament_id:
          type: integer
          description: "Unique identifier for the tournament."
        semifinal_id1:
          type: integer
          description: "ID of the first semifinal match."
        semifinal_id2:
          type: integer
          description: "ID of the second semifinal match."
        bonus_match_id:
          type: integer
          description: "ID of the bonus match."
        final_id:
          type: integer
          description: "ID of the final match."

    FriendCreationRequest:
      type: object
      properties:
        friend_user_id:
          type: integer
          format: int64
          description: "Identifier for the friend user."
        relation_status:
          type: string
          enum: [pending, blocked]
      required:
        - friend_user_id
        - relation_status

    FriendResponse:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          description: "Identifier for the user."
        friend_user_id:
          type: integer
          format: int64
          description: "Identifier for the friend user."
        relation_status:
          type: string
          enum: [pending, accepted, blocked]
          description: "Relation status with the friend."
        friend_nickname:
          type: string
          description: "Nickname of the friend."
        friend_status:
          type: string
          enum: [online, offline]
          description: "Login status of the friend."
        friend_profile_image_url:
          type: string
          format: uri
          description: "URL of the friend's profile image."

    TournamentRankingResponse:
      type: object
      properties:
        rank:
          type: integer
          description: "User's rank in the tournament."
        user_id:
          type: integer
          format: int64
          description: "Unique identifier for the user."
        user_nickname:
          type: string
          description: "Nickname of the user."
        score:
          type: integer
          description: "Score achieved by the user in the tournament."
